import streamlit as st

# Configuration de la page Streamlit (DOIT √™tre la premi√®re commande Streamlit)
st.set_page_config(
    page_title="Assistant M√©dical B√©nin",
    page_icon="üè•",
    layout="wide"
)

import pandas as pd
import folium
from streamlit_folium import folium_static
import benin_healthcare_data as bhd
from datetime import datetime, timedelta
import os
from dotenv import load_dotenv
import requests
import json
from typing import Dict, Optional
import time

# Charger les variables d'environnement
load_dotenv()

# Configuration de l'API Hugging Face
HF_API_URL = "https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.2"
HF_API_TOKEN = os.getenv("HUGGINGFACE_API_TOKEN")

# Cache pour stocker les r√©ponses
response_cache: Dict[str, Dict] = {}

def query_huggingface(prompt: str) -> Optional[str]:
    headers = {"Authorization": f"Bearer {HF_API_TOKEN}"}
    
    try:
        response = requests.post(
            HF_API_URL,
            headers=headers,
            json={"inputs": prompt}
        )
        
        if response.status_code == 200:
            return response.json()[0]['generated_text']
        elif response.status_code == 503:
            # Le mod√®le est en cours de chargement, attendre et r√©essayer
            time.sleep(20)
            return query_huggingface(prompt)
        else:
            st.error(f"Erreur API: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"Erreur de connexion: {str(e)}")
        return None

def generate_response(question: str) -> str:
    # V√©rifier le cache
    cache_key = question.lower().strip()
    if cache_key in response_cache:
        cached_response = response_cache[cache_key]
        if time.time() - cached_response['timestamp'] < 3600:  # Cache valide pendant 1 heure
            return cached_response['response']
    
    # Pr√©parer le prompt
    prompt = f"""
    Tu es un assistant m√©dical professionnel au B√©nin avec une expertise approfondie en sant√© publique.
    R√©ponds √† la question suivante de mani√®re claire, pr√©cise et adapt√©e au contexte b√©ninois.
    
    Question: {question}
    
    Pour les questions sur les maladies :
    - D√©cris les sympt√¥mes principaux
    - Explique les causes possibles
    - Donne des conseils de pr√©vention adapt√©s au contexte b√©ninois
    - Recommande quand consulter un m√©decin
    - Mentionne les centres de sant√© appropri√©s au B√©nin
    
    Pour les questions sur les traitements :
    - Explique les options disponibles au B√©nin
    - Mentionne les pr√©cautions √† prendre
    - Indique les centres sp√©cialis√©s au B√©nin
    
    R√©ponse:
    """
    
    # Obtenir la r√©ponse de l'API
    response = query_huggingface(prompt)
    
    if response:
        # Nettoyer la r√©ponse
        response = response.replace(prompt, "").strip()
        
        # Mettre en cache
        response_cache[cache_key] = {
            'response': response,
            'timestamp': time.time()
        }
        
        return response
    else:
        return """
        Je suis d√©sol√©, je ne peux pas r√©pondre √† cette question pour le moment.
        Veuillez r√©essayer plus tard ou consulter un professionnel de sant√©.
        """

# Base de connaissances m√©dicales
MEDICAL_KNOWLEDGE = {
    "paludisme": {
        "sympt√¥mes": [
            "Fi√®vre √©lev√©e et irr√©guli√®re (jusqu'√† 40¬∞C)",
            "Frissons et sueurs froides",
            "Douleurs musculaires",
            "Fatigue intense",
            "Maux de t√™te",
            "Naus√©es et vomissements",
            "Dans les cas graves : confusion, convulsions, coma"
        ],
        "causes": [
            "Piq√ªre de moustique Anoph√®le infect√©",
            "Parasite Plasmodium (principalement P. falciparum au B√©nin)",
            "Transmission par le sang (rare)"
        ],
        "pr√©vention": [
            "Utilisation de moustiquaires impr√©gn√©es",
            "Pulv√©risation d'insecticide dans les maisons",
            "√âlimination des eaux stagnantes",
            "Port de v√™tements couvrants le soir",
            "Utilisation de r√©pulsifs anti-moustiques"
        ],
        "centres": [
            "CNHU-HKM (Cotonou)",
            "H√¥pital de la M√®re et de l'Enfant (Cotonou)",
            "H√¥pital de Zone de Porto-Novo",
            "H√¥pital de Zone de Parakou",
            "H√¥pital Saint Jean de Dieu (Natitingou)"
        ]
    },
    "grippe": {
        "sympt√¥mes": [
            "Fi√®vre soudaine",
            "Toux s√®che",
            "Maux de gorge",
            "√âcoulement nasal",
            "Fatigue",
            "Douleurs musculaires"
        ],
        "causes": [
            "Virus influenza",
            "Transmission par gouttelettes",
            "Contact avec des surfaces contamin√©es"
        ],
        "pr√©vention": [
            "Vaccination annuelle",
            "Lavage fr√©quent des mains",
            "Port du masque en p√©riode d'√©pid√©mie",
            "√âviter les contacts avec les personnes malades"
        ],
        "centres": [
            "Tous les centres de sant√© primaires",
            "CNHU-HKM (Cotonou)",
            "H√¥pital de Zone de Porto-Novo"
        ]
    }
}

# Titre de l'application
st.title("ü§ñ Assistant IA en Sant√© - B√©nin")
st.markdown("""
    Bienvenue dans votre assistant IA sp√©cialis√© en sant√© au B√©nin. Posez vos questions sur la sant√©,
    trouvez des h√¥pitaux pr√®s de chez vous, et prenez rendez-vous avec des m√©decins.
""")

# Initialisation de Google Maps
@st.cache_resource
def init_gmaps():
    return googlemaps.Client(key=os.getenv('GOOGLE_MAPS_API_KEY'))

# Cr√©ation de la carte des h√¥pitaux
def create_hospitals_map():
    m = folium.Map(location=[9.3077, 2.3158], zoom_start=7)  # Centre sur le B√©nin
    
    for hospital_id, data in bhd.get_all_hospitals().items():
        folium.Marker(
            location=[data['coordinates']['lat'], data['coordinates']['lng']],
            popup=f"{data['name']}<br>Sp√©cialit√©s: {', '.join(data['specialties'])}<br>Contact: {data['contact']}",
            tooltip=data['name']
        ).add_to(m)
    
    return m

def main():
    # Onglets pour diff√©rentes fonctionnalit√©s
    tab1, tab2, tab3, tab4 = st.tabs(["Questions Sant√©", "Trouver un Centre de Sant√©", "Prendre Rendez-vous", "Assistant M√©dical"])
    
    with tab1:
        st.header("Posez vos questions sur la sant√©")
        user_question = st.text_area(
            "Votre question :",
            placeholder="Ex: Quels sont les sympt√¥mes du paludisme ? Comment pr√©venir le paludisme ?",
            height=100
        )
        
        if st.button("Obtenir une r√©ponse"):
            if user_question:
                with st.spinner("Analyse en cours..."):
                    try:
                        response = generate_response(user_question)
                        
                        st.markdown("### R√©ponse :")
                        st.write(response)
                        st.warning("""
                            ‚ö†Ô∏è Important : Les informations fournies par cet assistant ne remplacent pas 
                            l'avis d'un professionnel de sant√©. Consultez toujours un m√©decin pour des 
                            probl√®mes de sant√© sp√©cifiques.
                        """)
                    except Exception as e:
                        st.error(f"Une erreur est survenue : {str(e)}")
            else:
                st.warning("Veuillez poser une question.")
    
    with tab2:
        st.header("Trouver un centre de sant√©")
        col1, col2 = st.columns(2)
        
        with col1:
            city = st.text_input("Ville", placeholder="Ex: Cotonou")
            quartier = st.text_input("Quartier (optionnel)", placeholder="Ex: Akpakpa")
            facility_type = st.selectbox(
                "Type d'√©tablissement",
                ["", "Public", "Priv√©"]
            )
        
        with col2:
            specialty = st.selectbox(
                "Sp√©cialit√© (optionnel)",
                ["", "G√©n√©ral", "Cardiologie", "P√©diatrie", "Chirurgie", "Gyn√©cologie", 
                 "Obst√©trique", "Maternit√©", "Urgences"]
            )
        
        if st.button("Rechercher"):
            if city:
                try:
                    # Recherche des centres avec les crit√®res sp√©cifi√©s
                    facilities = bhd.search_facilities(
                        city=city,
                        quartier=quartier if quartier else None,
                        facility_type=facility_type if facility_type else None,
                        specialty=specialty if specialty else None
                    )
                    
                    if not facilities:
                        st.warning(f"Aucun centre de sant√© trouv√© √† {city}" + 
                                 (f" dans le quartier {quartier}" if quartier else "") +
                                 (f" de type {facility_type}" if facility_type else "") +
                                 (f" avec la sp√©cialit√© {specialty}" if specialty else ""))
                    else:
                        st.write(f"Centres de sant√© trouv√©s :")
                        for name, data in facilities.items():
                            st.write(f"### {data['name']}")
                            st.write(f"- **Type:** {data['type']}")
                            st.write(f"- **Localisation:** {data['location']}, {data['quartier']}")
                            st.write(f"- **Sp√©cialit√©s:** {', '.join(data['specialties'])}")
                            st.write(f"- **Services:** {', '.join(data['services'])}")
                            st.write(f"- **√âquipements:** {', '.join(data['equipements'])}")
                            st.write(f"- **Contact:** {data['contact']}")
                            st.write("")
                        
                        # Afficher la carte
                        st.header("Carte des centres de sant√©")
                        folium_static(create_hospitals_map())
                except Exception as e:
                    st.error(f"Une erreur est survenue : {str(e)}")
            else:
                st.warning("Veuillez entrer au moins une ville.")
    
    with tab3:
        st.header("Prendre un rendez-vous")
        
        # S√©lection du centre de sant√©
        facilities = bhd.get_all_facilities()
        facility_id = st.selectbox(
            "Centre de sant√©",
            options=list(facilities.keys()),
            format_func=lambda x: facilities[x]['name']
        )
        
        if facility_id:
            # S√©lection de la sp√©cialit√©
            specialties = set()
            for doctor in bhd.get_doctors_by_facility(facility_id).values():
                specialties.add(doctor['specialty'])
            
            specialty = st.selectbox(
                "Sp√©cialit√©",
                options=sorted(list(specialties))
            )
            
            # S√©lection du m√©decin
            doctors = {
                name: data for name, data in bhd.get_doctors_by_facility(facility_id).items()
                if data['specialty'] == specialty
            }
            
            doctor_name = st.selectbox(
                "M√©decin",
                options=list(doctors.keys())
            )
            
            # S√©lection de la date
            min_date = datetime.now().date()
            max_date = min_date + timedelta(days=30)
            date = st.date_input(
                "Date du rendez-vous",
                min_value=min_date,
                max_value=max_date
            )
            
            # S√©lection de l'heure
            if doctor_name and date:
                available_slots = bhd.get_available_slots(facility_id, doctor_name, date)
                time = st.selectbox(
                    "Heure du rendez-vous",
                    options=available_slots
                )
            
            # Informations du patient
            st.subheader("Informations du patient")
            patient_name = st.text_input("Nom complet")
            patient_phone = st.text_input("Num√©ro de t√©l√©phone")
            patient_email = st.text_input("Email (optionnel)")
            patient_birthdate = st.date_input("Date de naissance")
            patient_gender = st.selectbox("Genre", ["Homme", "Femme", "Autre"])
            
            # Motif de la consultation
            consultation_reason = st.text_area(
                "Motif de la consultation",
                placeholder="D√©crivez bri√®vement la raison de votre consultation"
            )
            
            # Bouton de confirmation
            if st.button("Confirmer le rendez-vous"):
                if not all([patient_name, patient_phone, patient_birthdate, patient_gender]):
                    st.error("Veuillez remplir tous les champs obligatoires")
                else:
                    patient_info = {
                        "name": patient_name,
                        "phone": patient_phone,
                        "email": patient_email,
                        "birthdate": patient_birthdate,
                        "gender": patient_gender,
                        "reason": consultation_reason
                    }
                    
                    success, message = bhd.book_slot(
                        facility_id,
                        doctor_name,
                        date,
                        time,
                        patient_info
                    )
                    
                    if success:
                        st.success(f"""
                            Rendez-vous confirm√© !
                            
                            D√©tails du rendez-vous :
                            - Centre : {facilities[facility_id]['name']}
                            - M√©decin : {doctor_name} ({specialty})
                            - Date : {date.strftime('%d/%m/%Y')}
                            - Heure : {time}
                            
                            Informations patient :
                            - Nom : {patient_name}
                            - Contact : {patient_phone}
                            {f'- Email : {patient_email}' if patient_email else ''}
                            
                            Important :
                            - Veuillez arriver 15 minutes avant l'heure du rendez-vous
                            - Apportez votre carte d'identit√© et votre carnet de sant√©
                            - En cas d'annulation, merci de nous pr√©venir au moins 24h √† l'avance
                        """)
                        
                        # Envoi de la confirmation par email si fourni
                        if patient_email:
                            # Ici, on pourrait ajouter la logique d'envoi d'email
                            st.info("Un email de confirmation vous a √©t√© envoy√©")
                    else:
                        st.error(message)
    
    with tab4:
        st.header("Assistant M√©dical")
        
        # Zone de texte pour la question
        question = st.text_area(
            "Posez votre question sur la sant√©",
            placeholder="Exemple: Quels sont les sympt√¥mes du paludisme ?"
        )
        
        if question:
            # G√©n√©rer la r√©ponse avec le mod√®le
            response = generate_response(question)
            
            # Afficher la r√©ponse
            st.markdown("### R√©ponse")
            st.markdown(response)
            
            # Avertissement standard
            st.warning("""
                ‚ö†Ô∏è Important : Les informations fournies par cet assistant ne remplacent pas l'avis d'un professionnel de sant√©. 
                Consultez toujours un m√©decin pour des probl√®mes de sant√© sp√©cifiques.
            """)

if __name__ == "__main__":
    main() 